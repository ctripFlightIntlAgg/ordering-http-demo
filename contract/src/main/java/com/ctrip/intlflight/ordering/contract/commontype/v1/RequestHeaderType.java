/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.intlflight.ordering.contract.commontype.v1;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.io.Serializable;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 此类型包含的参数不应该在业务逻辑中使用，这些参数是用来跟踪调试，查找特定用户特定操作等目的。
 */
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RequestHeaderType", namespace = "urn:com:ctrip:flight:intl:booking:order:contract:commontype:v1", propOrder = {
    "messageHeader",
    "loggingLevel",
    "diagInput"
})
@SuppressWarnings("all")
public class RequestHeaderType implements Serializable {

    private static final long serialVersionUID = 1L;

    public RequestHeaderType(
        MessageHeaderType messageHeader,
        int loggingLevel, 
        String diagInput) {
        this.messageHeader = messageHeader;
        this.loggingLevel = loggingLevel;
        this.diagInput = diagInput;
    }

    public RequestHeaderType() {
    }

    @JsonProperty("MessageHeader")
    @XmlElement(name = "MessageHeader")
    private MessageHeaderType messageHeader;

    @JsonProperty("LoggingLevel")
    @XmlElement(name = "LoggingLevel")
    private int loggingLevel;

    @JsonProperty("DiagInput")
    @XmlElement(name = "DiagInput")
    private String diagInput;

    /**
     * 请求头信息
     */
    public MessageHeaderType getMessageHeader() {
        return this.messageHeader;
    }

    public void setMessageHeader(MessageHeaderType messageHeader) {
        this.messageHeader = messageHeader;
    }

    /**
     * 用于LoggingLevel用来控制应用服务内部处理此报文的日志或记录，0表示不需要任何日志或记录，1表示必要的日志或记录，etc（注意：每个应用服务可以自由定义各值的含义）
     */
    public int getLoggingLevel() {
        return this.loggingLevel;
    }

    public void setLoggingLevel(int loggingLevel) {
        this.loggingLevel = loggingLevel;
    }

    /**
     * 给调试使用的数据
     */
    public String getDiagInput() {
        return this.diagInput;
    }

    public void setDiagInput(String diagInput) {
        this.diagInput = diagInput;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final RequestHeaderType other = (RequestHeaderType)obj;
        return
            Objects.equal(this.messageHeader, other.messageHeader) && 
            Objects.equal(this.loggingLevel, other.loggingLevel) && 
            Objects.equal(this.diagInput, other.diagInput);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.messageHeader);
        result = 31 * result + Objects.hashCode(this.loggingLevel);
        result = 31 * result + Objects.hashCode(this.diagInput);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("messageHeader", messageHeader)
            .add("loggingLevel", loggingLevel)
            .add("diagInput", diagInput)
            .toString();
    }

}
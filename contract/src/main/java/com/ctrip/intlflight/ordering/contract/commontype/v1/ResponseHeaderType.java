/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.intlflight.ordering.contract.commontype.v1;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.io.Serializable;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ResponseHeaderType", namespace = "urn:com:ctrip:flight:intl:booking:order:contract:commontype:v1", propOrder = {
    "messageHeader",
    "serverIP",
    "returnCode",
    "diagOutput"
})
@SuppressWarnings("all")
public class ResponseHeaderType implements Serializable {

    private static final long serialVersionUID = 1L;

    public ResponseHeaderType(
        MessageHeaderType messageHeader,
        String serverIP, 
        int returnCode, 
        String diagOutput) {
        this.messageHeader = messageHeader;
        this.serverIP = serverIP;
        this.returnCode = returnCode;
        this.diagOutput = diagOutput;
    }

    public ResponseHeaderType() {
    }

    @JsonProperty("MessageHeader")
    @XmlElement(name = "MessageHeader")
    private MessageHeaderType messageHeader;

    @JsonProperty("ServerIP")
    @XmlElement(name = "ServerIP")
    private String serverIP;

    @JsonProperty("ReturnCode")
    @XmlElement(name = "ReturnCode")
    private int returnCode;

    @JsonProperty("DiagOutput")
    @XmlElement(name = "DiagOutput")
    private String diagOutput;

    /**
     * 请求头信息
     */
    public MessageHeaderType getMessageHeader() {
        return this.messageHeader;
    }

    public void setMessageHeader(MessageHeaderType messageHeader) {
        this.messageHeader = messageHeader;
    }

    /**
     * 用来标识应用服务器的IP地址
     */
    public String getServerIP() {
        return this.serverIP;
    }

    public void setServerIP(String serverIP) {
        this.serverIP = serverIP;
    }

    /**
     * 用处理结果标识：0-无错，其他为错误代码（注意：每个应用服务可以自由定义什么是出错）
     */
    public int getReturnCode() {
        return this.returnCode;
    }

    public void setReturnCode(int returnCode) {
        this.returnCode = returnCode;
    }

    /**
     * 为跟踪调试应用服务保留
     */
    public String getDiagOutput() {
        return this.diagOutput;
    }

    public void setDiagOutput(String diagOutput) {
        this.diagOutput = diagOutput;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final ResponseHeaderType other = (ResponseHeaderType)obj;
        return
            Objects.equal(this.messageHeader, other.messageHeader) && 
            Objects.equal(this.serverIP, other.serverIP) && 
            Objects.equal(this.returnCode, other.returnCode) && 
            Objects.equal(this.diagOutput, other.diagOutput);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.messageHeader);
        result = 31 * result + Objects.hashCode(this.serverIP);
        result = 31 * result + Objects.hashCode(this.returnCode);
        result = 31 * result + Objects.hashCode(this.diagOutput);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("messageHeader", messageHeader)
            .add("serverIP", serverIP)
            .add("returnCode", returnCode)
            .add("diagOutput", diagOutput)
            .toString();
    }

}
/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.intlflight.ordering.contract.saveorder.v2;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.io.Serializable;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 
 *         ABTest实验信息
 *       
 */
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ABTestType", namespace = "urn:com:ctrip:flight:intl:booking:order:contract:saveorder:v2", propOrder = {
    "cid",
    "experiment",
    "version"
})
@SuppressWarnings("all")
public class ABTestType implements Serializable {

    private static final long serialVersionUID = 1L;

    public ABTestType(
        String cid, 
        String experiment, 
        String version) {
        this.cid = cid;
        this.experiment = experiment;
        this.version = version;
    }

    public ABTestType() {
    }

    @JsonProperty("CID")
    @XmlElement(name = "CID")
    private String cid;

    @JsonProperty("Experiment")
    @XmlElement(name = "Experiment")
    private String experiment;

    @JsonProperty("Version")
    @XmlElement(name = "Version")
    private String version;

    /**
     * 实验分流依据(vid或者clientcode)
     */
    public String getCid() {
        return this.cid;
    }

    public void setCid(String cid) {
        this.cid = cid;
    }

    /**
     * 实验号
     */
    public String getExperiment() {
        return this.experiment;
    }

    public void setExperiment(String experiment) {
        this.experiment = experiment;
    }

    /**
     * 实验版本
     */
    public String getVersion() {
        return this.version;
    }

    public void setVersion(String version) {
        this.version = version;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final ABTestType other = (ABTestType)obj;
        return
            Objects.equal(this.cid, other.cid) && 
            Objects.equal(this.experiment, other.experiment) && 
            Objects.equal(this.version, other.version);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.cid);
        result = 31 * result + Objects.hashCode(this.experiment);
        result = 31 * result + Objects.hashCode(this.version);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("cid", cid)
            .add("experiment", experiment)
            .add("version", version)
            .toString();
    }

}
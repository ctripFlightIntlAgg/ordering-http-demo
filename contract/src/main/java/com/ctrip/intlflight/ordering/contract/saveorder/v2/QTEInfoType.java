/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.intlflight.ordering.contract.saveorder.v2;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.io.Serializable;
import java.math.BigDecimal;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * QTE Info
 */
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "QTEInfoType", namespace = "urn:com:ctrip:flight:intl:booking:order:contract:saveorder:v2", propOrder = {
    "salePrice",
    "tax"
})
@SuppressWarnings("all")
public class QTEInfoType implements Serializable {

    private static final long serialVersionUID = 1L;

    public QTEInfoType(
        BigDecimal salePrice, 
        BigDecimal tax) {
        this.salePrice = salePrice;
        this.tax = tax;
    }

    public QTEInfoType() {
        this.salePrice = new BigDecimal(0);
        this.tax = new BigDecimal(0);
    }

    @JsonProperty("SalePrice")
    @XmlElement(name = "SalePrice")
    private BigDecimal salePrice;

    @JsonProperty("Tax")
    @XmlElement(name = "Tax")
    private BigDecimal tax;

    /**
     * *携程卖价
     */
    public BigDecimal getSalePrice() {
        return this.salePrice;
    }

    public void setSalePrice(BigDecimal salePrice) {
        this.salePrice = salePrice;
    }

    /**
     * *税费
     */
    public BigDecimal getTax() {
        return this.tax;
    }

    public void setTax(BigDecimal tax) {
        this.tax = tax;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final QTEInfoType other = (QTEInfoType)obj;
        return
            Objects.equal(this.salePrice, other.salePrice) && 
            Objects.equal(this.tax, other.tax);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.salePrice);
        result = 31 * result + Objects.hashCode(this.tax);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("salePrice", salePrice)
            .add("tax", tax)
            .toString();
    }

}